"use strict";

function LedMatrix(options) {
    this.setLedMethod = options.setLedMethod;
    this.clearLedMethod = options.clearLedMethod;

    this.startTransactionMethod = options.startTransactionMethod;
    this.commitTransactionMethod = options.commitTransactionMethod;
    this.clearAllLedMethod = options.clearAllLedMethod;

    this.defaultColor = options.defaultColor;
    this.width = options.matrixWidth || 8;
    this.height = options.matrixHeight || 8;
    this.frameRate = options.frameRate || 60;

    this.updateTimeoutId = null;
}

LedMatrix.prototype.update = function(updateCallback, endCallback, duration, bufferLength) {
    this.stop();

    bufferLength = Math.abs(bufferLength);
    var progress = 0;
    var frameDelay = duration / bufferLength;

    (function animate() {
        updateCallback.call(this, progress++);

        if (progress === bufferLength) {
            this.updateTimeoutId = setTimeout(endCallback.bind(this), frameDelay);
            return;
        }

        this.updateTimeoutId = setTimeout(animate.bind(this), frameDelay);
    }.bind(this))();
};

LedMatrix.prototype.stop = function(callback) {
    clearTimeout(this.updateTimeoutId);
};

LedMatrix.prototype.leftPad = function(input, size) {
    return (Array(size + 1).join("0") + input).slice(-size);
};

LedMatrix.prototype.setLed = function(row, col, color) {
    this.setLedMethod(row, col, color || this.defaultColor);
};

LedMatrix.prototype.clearLed = function(row, col, color) {
    this.clearLedMethod(row, col, color || this.defaultColor);
};

LedMatrix.prototype.setRow = function(row, color) {
    for (var col = this.width - 1; col >= 0; col--) {
        this.setLed(row, col, color);
    }
};

LedMatrix.prototype.setCol = function(col, color) {
    for (var row = this.height - 1; row >= 0; row--) {
        this.setLed(row, col, color);
    }
};

LedMatrix.prototype.forEachLed = function(callback) {
    var colIndex = 0;
    var rowIndex = 0;

    while (rowIndex < this.width) {
        while (colIndex < this.height) {
            callback.call(this, rowIndex, colIndex);
            colIndex++;
        }
        colIndex = 0;
        rowIndex++;
    }
};

/*
[
    [0, 0, 0, 1, 0, 0, 0, 1],
    [0, 0, 0, 1, 0, 0, 0, 1],
    [0, 0, 0, 1, 0, 0, 0, 1],
    [0, 0, 0, 1, 0, 0, 0, 1],
    [0, 0, 0, 1, 0, 0, 0, 1],
    [0, 0, 0, 1, 0, 0, 0, 1],
    [0, 0, 0, 1, 0, 0, 0, 1],
    [0, 0, 0, 1, 0, 0, 0, 1]
]
*/
LedMatrix.prototype.setFrame = function(frameRows, color, xOffset, yOffset) {
    color = color || this.defaultColor;
    xOffset = xOffset || 0;
    yOffset = yOffset || 0;
    this.clearAllLedMethod();

    this.forEachLed(function(rowIndex, colIndex) {
        var row,
            ledState;

        if (rowIndex - yOffset >= 0 && rowIndex - yOffset < frameRows.length) {
            row = frameRows[rowIndex - yOffset];

            if (colIndex - xOffset >= 0 && colIndex - xOffset < row.length) {
                ledState = row[colIndex - xOffset];
            } else {
                ledState = "0";
            }

        } else {
            ledState = "0";
        }

        if (ledState === "1" || ledState === 1) {
            this.setLed(rowIndex, colIndex, color);
        }
    });
};

LedMatrix.prototype.getFrameFromChar = function(aChar) {
    var rows = LedMatrix.MATRIX_CHARS[aChar],
        frame = [];

    if (!rows) {
        return frame;
    }

    rows.forEach(function(row) {
        var bin = row.toString(2);
        bin = this.leftPad(bin, this.width);
        frame.push(bin.split(""));
    }.bind(this));

    return frame;
};

LedMatrix.prototype.concatFrames = function(frames) {
    var frame;

    frames.forEach(function(newFrame) {
        if (!frame) {
            frame = newFrame;

            return;
        }

        //Concate horizontally
        frame = frame.map(function(row, rowIndex) {
            return row.concat(newFrame[rowIndex]);
        });
    });

    return frame;
};


LedMatrix.prototype.getFramesFromText = function(string) {
    return string.split("").map(function(char) {
        return this.getFrameFromChar(char);
    }.bind(this));
};

LedMatrix.prototype.setChar = function(char, color) {
    var frame = this.getFrameFromChar(char);
    this.setFrame(frame, color);
};


LedMatrix.prototype.ticker = function(textFrames, options) {
    var duration = options && options.duration || 2000,
        loop = options && options.loop || -1,
        looped = 0;

    if (typeof textFrames === "string") {
        textFrames = this.concatFrames(this.getFramesFromText(textFrames));
    }

    var startOffset = this.width;
    var targetOffset = -textFrames[0].length;

    var bufferLength = targetOffset - startOffset;
    var vector = targetOffset - startOffset < 0 ? -1 : 1;

    function update(progress) {
        this.startTransactionMethod();
        this.setFrame(textFrames, "blue", startOffset + vector * progress);
        this.commitTransactionMethod();
    }

    function end() {
        looped++;
        if (loop === -1 || looped >= loop) {
            this.clearAllLedMethod();
            return;
        }

        this.update(update, end, duration, bufferLength);
    }

    this.update(update, end, duration, bufferLength);
};


LedMatrix.prototype.flashFrames = function(textFrames, options) {
    var duration = options && options.duration || 2000,
        loop = options && options.loop || 1,
        looped = 0;

    if (typeof textFrames === "string") {
        textFrames = this.getFramesFromText(textFrames);
    }

    var currentIndex = 0;

    function update() {
        this.startTransactionMethod();
        this.setFrame(textFrames[currentIndex++], "blue", 0);
        this.commitTransactionMethod();
    }

    function end() {
        looped++;
        if (loop !== -1 && looped >= loop) {
            if (options && options.endCallback) {
                options.endCallback.call(this);
            }
            return;
        }
        currentIndex = 0;
        this.update(update, end, duration, textFrames.length);
    }

    this.update(update, end, duration, textFrames.length);
};

LedMatrix.MATRIX_CHARS = {
    " ": [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    "!": [0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00],
    '"': [0x0A, 0x0A, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00],
    "#": [0x0A, 0x0A, 0x1F, 0x0A, 0x1F, 0x0A, 0x0A, 0x00],
    "$": [0x04, 0x0F, 0x14, 0x0E, 0x05, 0x1E, 0x04, 0x00],
    "%": [0x18, 0x19, 0x02, 0x04, 0x08, 0x13, 0x03, 0x00],
    "&": [0x0C, 0x12, 0x14, 0x08, 0x15, 0x12, 0x0D, 0x00],
    "'": [0x0C, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00],
    "(": [0x02, 0x04, 0x08, 0x08, 0x08, 0x04, 0x02, 0x00],
    ")": [0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08, 0x00],
    "*": [0x00, 0x04, 0x15, 0x0E, 0x15, 0x04, 0x00, 0x00],
    "+": [0x00, 0x04, 0x04, 0x1F, 0x04, 0x04, 0x00, 0x00],
    ",": [0x00, 0x00, 0x00, 0x00, 0x0C, 0x04, 0x08, 0x00],
    "-": [0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00],
    ".": [0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00],
    "/": [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x00, 0x00],
    "0": [0x0E, 0x11, 0x13, 0x15, 0x19, 0x11, 0x0E, 0x00],
    "1": [0x04, 0x0C, 0x04, 0x04, 0x04, 0x04, 0x0E, 0x00],
    "2": [0x0E, 0x11, 0x01, 0x02, 0x04, 0x08, 0x1F, 0x00],
    "3": [0x1F, 0x02, 0x04, 0x02, 0x01, 0x11, 0x0E, 0x00],
    "4": [0x02, 0x06, 0x0A, 0x12, 0x1F, 0x02, 0x02, 0x00],
    "5": [0x1F, 0x10, 0x1E, 0x01, 0x01, 0x11, 0x0E, 0x00],
    "6": [0x06, 0x08, 0x10, 0x1E, 0x11, 0x11, 0x0E, 0x00],
    "7": [0x1F, 0x01, 0x02, 0x04, 0x04, 0x04, 0x04, 0x00],
    "8": [0x1E, 0x11, 0x11, 0x0E, 0x11, 0x11, 0x0E, 0x00],
    "9": [0x0E, 0x11, 0x11, 0x0F, 0x01, 0x02, 0x0C, 0x00],
    ":": [0x00, 0x0C, 0x0C, 0x00, 0x0C, 0x0C, 0x00, 0x00],
    ";": [0x00, 0x0C, 0x0C, 0x00, 0x0C, 0x04, 0x08, 0x00],
    "<": [0x02, 0x04, 0x08, 0x10, 0x08, 0x04, 0x02, 0x00],
    "=": [0x00, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x00, 0x00],
    ">": [0x08, 0x04, 0x02, 0x01, 0x02, 0x04, 0x08, 0x00],
    "?": [0x0E, 0x11, 0x01, 0x02, 0x04, 0x00, 0x04, 0x00],
    "@": [0x0E, 0x11, 0x01, 0x0D, 0x15, 0x15, 0x0E, 0x00],
    "A": [0x08, 0x14, 0x22, 0x3E, 0x22, 0x22, 0x22, 0x22],
    "B": [0x3C, 0x22, 0x22, 0x3E, 0x22, 0x22, 0x3C, 0x00],
    "C": [0x3C, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3C, 0x00],
    "D": [0x7C, 0x42, 0x42, 0x42, 0x42, 0x42, 0x7C, 0x00],
    "E": [0x7C, 0x40, 0x40, 0x7C, 0x40, 0x40, 0x40, 0x7C],
    "F": [0x7C, 0x40, 0x40, 0x7C, 0x40, 0x40, 0x40, 0x40],
    "G": [0x3C, 0x40, 0x40, 0x40, 0x40, 0x44, 0x44, 0x3C],
    "H": [0x44, 0x44, 0x44, 0x7C, 0x44, 0x44, 0x44, 0x44],
    "I": [0x7C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7C],
    "J": [0x3C, 0x08, 0x08, 0x08, 0x08, 0x08, 0x48, 0x30],
    "K": [0x00, 0x24, 0x28, 0x30, 0x20, 0x30, 0x28, 0x24],
    "L": [0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x7C],
    "M": [0x81, 0xC3, 0xA5, 0x99, 0x81, 0x81, 0x81, 0x81],
    "N": [0x00, 0x42, 0x62, 0x52, 0x4A, 0x46, 0x42, 0x00],
    "O": [0x3C, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C],
    "P": [0x3C, 0x22, 0x22, 0x22, 0x3C, 0x20, 0x20, 0x20],
    "Q": [0x1C, 0x22, 0x22, 0x22, 0x22, 0x26, 0x22, 0x1D],
    "R": [0x3C, 0x22, 0x22, 0x22, 0x3C, 0x24, 0x22, 0x21],
    "S": [0x00, 0x1E, 0x20, 0x20, 0x3E, 0x02, 0x02, 0x3C],
    "T": [0x00, 0x3E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08],
    "U": [0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x22, 0x1C],
    "V": [0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x24, 0x18],
    "W": [0x00, 0x49, 0x49, 0x49, 0x49, 0x2A, 0x1C, 0x00],
    "X": [0x00, 0x41, 0x22, 0x14, 0x08, 0x14, 0x22, 0x41],
    "Y": [0x41, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 0x08],
    "Z": [0x00, 0x7F, 0x02, 0x04, 0x08, 0x10, 0x20, 0x7F],
    "[": [0x0E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0E, 0x00],
    "\\": [0x00, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00, 0x00],
    "]": [0x0E, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0E, 0x00],
    "^": [0x04, 0x0A, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00],
    "_": [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00],
    "`": [0x10, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00],
    "a": [0x00, 0x00, 0x0E, 0x01, 0x0F, 0x11, 0x0F, 0x00],
    "b": [0x10, 0x10, 0x16, 0x19, 0x11, 0x11, 0x1E, 0x00],
    "c": [0x00, 0x00, 0x0E, 0x11, 0x10, 0x11, 0x0E, 0x00],
    "d": [0x01, 0x01, 0x0D, 0x13, 0x11, 0x11, 0x0F, 0x00],
    "e": [0x00, 0x00, 0x0E, 0x11, 0x1F, 0x10, 0x0E, 0x00],
    "f": [0x02, 0x05, 0x04, 0x0E, 0x04, 0x04, 0x04, 0x00],
    "g": [0x00, 0x0D, 0x13, 0x13, 0x0D, 0x01, 0x0E, 0x00],
    "h": [0x10, 0x10, 0x16, 0x19, 0x11, 0x11, 0x11, 0x00],
    "i": [0x04, 0x00, 0x0C, 0x04, 0x04, 0x04, 0x0E, 0x00],
    "j": [0x02, 0x00, 0x06, 0x02, 0x02, 0x12, 0x0C, 0x00],
    "k": [0x08, 0x08, 0x09, 0x0A, 0x0C, 0x0A, 0x09, 0x00],
    "l": [0x0C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0E, 0x00],
    "m": [0x00, 0x00, 0x1A, 0x15, 0x15, 0x15, 0x15, 0x00],
    "n": [0x00, 0x00, 0x16, 0x19, 0x11, 0x11, 0x11, 0x00],
    "o": [0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x0E, 0x00],
    "p": [0x00, 0x16, 0x19, 0x19, 0x16, 0x10, 0x10, 0x00],
    "q": [0x00, 0x0D, 0x13, 0x13, 0x0D, 0x01, 0x01, 0x00],
    "r": [0x00, 0x00, 0x16, 0x19, 0x10, 0x10, 0x10, 0x00],
    "s": [0x00, 0x00, 0x0F, 0x10, 0x1E, 0x01, 0x1F, 0x00],
    "t": [0x08, 0x08, 0x1C, 0x08, 0x08, 0x09, 0x06, 0x00],
    "u": [0x00, 0x00, 0x12, 0x12, 0x12, 0x12, 0x0D, 0x00],
    "v": [0x00, 0x00, 0x11, 0x11, 0x11, 0x0A, 0x04, 0x00],
    "w": [0x00, 0x00, 0x11, 0x11, 0x15, 0x15, 0x0A, 0x00],
    "x": [0x00, 0x00, 0x11, 0x0A, 0x04, 0x0A, 0x11, 0x00],
    "y": [0x00, 0x00, 0x11, 0x11, 0x13, 0x0D, 0x01, 0x0E],
    "z": [0x00, 0x00, 0x1F, 0x02, 0x04, 0x08, 0x1F, 0x00],
    "{": [0x02, 0x04, 0x04, 0x08, 0x04, 0x04, 0x02, 0x00],
    "|": [0x04, 0x04, 0x04, 0x00, 0x04, 0x04, 0x04, 0x00],
    "}": [0x08, 0x04, 0x04, 0x02, 0x04, 0x04, 0x08, 0x00],
    "~": [0x08, 0x15, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00]
};

module.exports = LedMatrix;